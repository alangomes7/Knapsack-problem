#ifndef KNAPSACKWINDOW_H
#define KNAPSACKWINDOW_H

#include "bag.h"
#include "package.h"
#include "dependency.h"
#include "algorithm.h"

#include <QMainWindow>
#include <QString>
#include <vector>

// Forward declaration for the UI class generated by Qt Designer
QT_BEGIN_NAMESPACE
namespace Ui {
class KnapsackWindow;
}
QT_END_NAMESPACE

/**
 * @brief The main window for the Knapsack Solver application.
 *
 * This class manages the user interface, user interactions, and the overall
 * application logic. It is responsible for loading package data from a file,
 * running the selected knapsack algorithm, and displaying the results. üñ•Ô∏è
 */
class KnapsackWindow : public QMainWindow {
    Q_OBJECT

public:
    /**
     * @brief Constructs the main window.
     * @param parent The parent widget, typically nullptr for the main window.
     */
    explicit KnapsackWindow(QWidget *parent = nullptr);

    /**
     * @brief Destructor. Cleans up dynamically allocated resources, such as the UI
     * and the Bag objects created during execution.
     */
    ~KnapsackWindow();

private slots:
    /**
     * @brief Slot triggered when the 'Select File' button is clicked.
     * Opens a file dialog to allow the user to choose an input data file.
     */
    void onFilePathButtonClicked();

    /**
     * @brief Slot triggered when the 'Run Algorithm' button is clicked.
     * Executes the currently selected algorithm with the loaded data.
     */
    void onRunButtonClicked();

    /**
     * @brief Slot triggered when the algorithm selection in the combo box changes.
     * Updates the application state based on the newly selected algorithm.
     */
    void onAlgorithmChanged();

    std::string getAlgorithmLabel(Algorithm::ALGORITHM_TYPE algo,
                              Algorithm::LOCAL_SEARCH ls = Algorithm::LOCAL_SEARCH::NONE);

private:
    /**
     * @brief Sets up initial states and default values for UI elements.
     */
    void initializeUiElements();

    /**
     * @brief Connects UI element signals (e.g., button clicks) to their corresponding slots.
     */
    void setupConnections();

    /**
     * @brief Loads and parses the package and dependency data from the file
     * specified by m_filePath.
     */
    void loadFile();

    /**
     * @brief Saves the data from the current algorithm execution.
     */
    void saveData();

    /**
     * @brief Displays the list of all available packages in the UI.
     */
    void printPackages();

    /**
     * @brief Displays the list of all available dependencies in the UI.
     */
    void printDependencies();

    /**
     * @brief Displays the contents and statistics of a filled Bag in the UI.
     * @param algorithmName The name of the algorithm that produced the bag.
     */
    void printBag(const std::string& algorithmName);

    /**
     * @brief Saves a detailed report for the best solution found in a population.
     *
     * This function identifies the bag with the highest benefit from the provided vector
     * and generates a detailed report file.
     *
     * @param bags A constant reference to a vector of pointers to Bag objects, representing the solution population.
     * @param allPackages A map of all available packages, used to generate the binary solution vector.
     * @param allDependencies A map of all available dependencies.
     * @param seed The random seed used for the experiment.
     * @param filePath The path to the original input file, used for naming the report.
     * @param timestamp The timestamp string to append to the report filename.
     */
    void saveReport(const std::vector<Bag*>& bags, 
                    const std::unordered_map<std::string, Package*>& allPackages, 
                    const std::unordered_map<std::string, Dependency*>& allDependencies, 
                    unsigned int seed, 
                    const std::string& filePath, 
                    const std::string& timestamp);
    
    /**
     * @brief Converts a timestamp string to a filename-friendly format.
     * * Replaces spaces and colons with underscores.
     * Example: "2025-10-10 08:36:43" becomes "2025-10-10_08_36_43".
     *
     * @param timestamp The input timestamp string.
     * @return A new string with the converted format.
     */
    std::string formatTimestampForFilename(std::string timestamp);

    /// A pointer to the UI layout and widgets created in Qt Designer.
    Ui::KnapsackWindow *ui;

    /// The algorithm engine used to solve the knapsack problem.
    Algorithm *m_algorithm;

    /// The maximum capacity of the bag, read from the input file.
    int m_bagSize;

    /// The file path of the currently loaded package data file.
    QString m_filePath;

    /**
     * @brief A list of all bags generated by the algorithm runs.
     * @note This window takes ownership of these Bag pointers and is responsible for their deletion.
     */
    std::vector<Bag*> m_bags;

    /**
     * @brief A list of all available packages loaded from the input file.
     * @note This window owns these pointers and is responsible for their deletion.
     */
    std::unordered_map<std::string, Package*> m_availablePackages;

    /**
     * @brief A list of all available dependencies loaded from the input file.
     * @note This window owns these pointers and is responsible for their deletion.
     */
    std::unordered_map<std::string, Dependency*> m_availableDependencies;
};
#endif // KNAPSACKWINDOW_H